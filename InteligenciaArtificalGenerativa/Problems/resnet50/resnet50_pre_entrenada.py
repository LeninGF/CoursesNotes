# -*- coding: utf-8 -*-
"""ResNet50 pre-entrenada.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KJ5q0U8qO_NCYNiIXPw_E3uMhpX12q8V
"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!pip install kaggle

!kaggle datasets download -d alxmamaev/flowers-recognition

!unzip flowers-recognition.zip -d /content/flowers/

!ls /content/flowers/flowers


import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dropout

# Cargar el modelo ResNet50 preentrenado en ImageNet
# Excluimos la capa final densa (include_top=False)
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Congelar todas las capas del modelo base
for layer in base_model.layers:
    layer.trainable = False

    # Descongelar algunas capas de ResNet50 (por ejemplo, las últimas 10)
for layer in base_model.layers[-10:]:
    layer.trainable = True


# Añadir nuevas capas para la clasificación de flores
x = base_model.output
x = Flatten()(x)  # Aplanar las características
x = Dense(128, activation='relu')(x)  # Añadir una capa completamente conectada
predictions = Dense(5, activation='softmax')(x)  # 5 clases de flores
"""
# Añadir dos nuevas capas para la clasificación de flores
x = base_model.output
x = Flatten()(x)
x = Dense(256, activation='relu')(x)  # Más neuronas
x = Dropout(0.5)(x)  # Añadir dropout para evitar sobreajuste
x = Dense(128, activation='relu')(x)
predictions = Dense(5, activation='softmax')(x)
"""
# Crear el modelo final
model = Model(inputs=base_model.input, outputs=predictions)

# Compilar el modelo
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Crear un generador de datos para cargar las imágenes
train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

"""
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2  # Mantén el split de validación
)
"""
train_generator = train_datagen.flow_from_directory(
    '/content/flowers/flowers',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)


validation_generator = train_datagen.flow_from_directory(
    '/content/flowers/flowers',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Entrenar solo las últimas capas
history = model.fit(train_generator, epochs=10, validation_data=validation_generator)


import numpy as np
import matplotlib.pyplot as plt


from tensorflow.keras.preprocessing.image import ImageDataGenerator


# Mostrar la clasificación de algunas imágenes del conjunto de validación
def display_prediction(model, validation_generator, class_names, num_images=5):
    # Obtener algunas imágenes del conjunto de validación
    x_batch, y_batch = next(validation_generator)  # Un lote de imágenes y etiquetas

    for i in range(num_images):
        img = x_batch[i]  # Obtener la imagen i-ésima del lote
        true_label = np.argmax(y_batch[i])  # Obtener la clase verdadera de la imagen

        # Hacer predicción
        pred_probs = model.predict(np.expand_dims(img, axis=0))  # Predice la clase de la imagen
        pred_label = np.argmax(pred_probs)  # Obtener la clase predicha

        # Mostrar la imagen y las predicciones
        plt.imshow(img)
        plt.title(f"Verdadera: {class_names[true_label]}\nPredicción: {class_names[pred_label]}")
        plt.axis('off')
        plt.show()

# Definir las clases de flores (según las subcarpetas del dataset)
class_names = ['daisy', 'dandelion', 'rose', 'sunflower', 'tulip']

# Mostrar algunas imágenes y sus predicciones después del entrenamiento
display_prediction(model, validation_generator, class_names)